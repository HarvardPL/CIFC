
Require Import Coq.Arith.Arith.
Require Import Coq.Bool.Bool.
Require Import Coq.Strings.String.
Require Import Coq.Arith.EqNat.
Require Import Coq.omega.Omega.
Require Import Coq.Lists.List.

Require Import Language.
Require Import Lemmas.
Require Import preservation.


Theorem progress : forall config T ct h ctn ctns, 
  config = (Config ct ctn ctns h) ->
  valid_config (Config ct ctn ctns h) ->
  config_has_type ct empty_context (Config ct ctn ctns h) T
  -> terminal_state config \/ (exists config', config ==> config').
Proof with eauto.
  intros config T ct h ctn ctns.
  intro H_config.
  intro H_valid_config. 
  intro H_typing. 
  remember (empty_context) as Gamma.
  inversion H_typing; subst; auto.
  inversion H2; subst; auto.

  inversion H_valid_config; subst; auto.
  induction H0; subst; auto.
  - inversion H1; subst; auto.
    inversion H17; subst; auto.
    
    inversion H24; subst; auto.
    



  -
  inversion H_valid_config; subst; auto.
  inversion H17.
  


  
  
  induction H5. subst. 
- inversion H5. 
- subst.  inversion H3. subst. apply value_progress with  (OpaqueLabeledTy T1); auto.
(*
- subst.  pose proof (excluded_middle_value e). destruct H1.
  right. inversion H1; subst; inversion H6. 
  + subst. destruct H13 as [F]. destruct H2 as [lo].
      inversion H_valid_config. 
      assert (exists v, F(f) = Some v).
      apply field_val_of_heap_obj with h o CT cls_def0 lo cls' (find_fields cls_def); auto. subst. 
      rewrite <- H5 in H14. inversion H14. auto.  subst. 
      destruct H24 as [v]. 
      remember (join_label lo lb0) as l'.
      exists (Config CT (Container v fs0 l' sf0) ctns h); auto.  
      apply ST_fieldRead3 with lo cls_def0 F; auto. 
  +  exists Error_state; subst; auto.
  + subst. inversion H4.  subst.  inversion H_valid_config. inversion H15.  destruct H27. inversion H27. 
  + right. exists (Config CT (Container (e) ((FieldAccess hole f)::fs0) lb0 sf0) ctns h); auto. 
- subst.  pose proof (excluded_middle_value e). destruct H1.
  right. inversion H1; subst; inversion H6_. 
  + subst. pose proof (excluded_middle_value argu). destruct H2. 

 destruct H13 as [F]. destruct H3 as [lx].
  subst. rewrite <- H5 in H6. inversion H6. subst. 
  remember (sf_update empty_stack_frame arg_id argu) as sf'.
  exists (Config CT (Container body nil lb0 sf' ) ((Container (hole) fs0 lb0 sf0 ) :: ctns) h). auto.
  apply ST_MethodCall_normal with cls_def0 F lx arg_id arguT returnT; auto.
    ++ pose proof (exclude_middle_unlabelOpaque argu). destruct H3.  
  +++ destruct H3 as [v]. destruct H3. 
  destruct H13 as [F]. destruct H10 as [lo].
  rewrite H9 in H6_0. inversion H6_0. subst. inversion H3; subst; inversion H18.
  ++++ subst.  ctn_has_type
  exists Error_state. auto.
  ++++ subst.
  remember ( sf_update empty_stack_frame arg_id v0) as sf'. 
  remember ( join_label lb0 lb1) as lb'. 
  exists (Config CT (Container body nil lb' sf' ) ((Container dot fs0 lb0 sf0 ) :: ctns) h). 
  apply ST_MethodCall_unlableOpaque with cls_def0 F arg_id arguT returnT lo; auto. 
  rewrite <- H5 in H6. inversion H6. subst. auto. 
  ++++ subst. inversion H4.  subst.  inversion H_valid_config. inversion H22.
  destruct H33. inversion H33. 
    +++ destruct H3. 
  ++++ exists (Config CT (Container (argu) ((MethodCall (ObjId o) meth hole)::fs0) lb0 sf0) ctns h); auto. 
  ++++ exists (Config CT (Container (argu) ((MethodCall (ObjId o) meth hole)::fs0) lb0 sf0) ctns h); auto.
    apply ST_MethodCall4.  intros. intro contra. destruct H3 as [t']. destruct H3.  
    rewrite H3 in contra. inversion contra.  subst. intuition. 
      auto. auto. 
  +  exists Error_state; subst; auto.
  + subst. inversion H4.  subst.  inversion H_valid_config. inversion H15.  destruct H27. inversion H27. 
  + right. exists (Config CT (Container (e) ((MethodCall hole meth argu)::fs0) lb0 sf0) ctns h); auto.
- subst. inversion H4. subst. destruct H6 as [cls]. destruct H1 as [field_defs]. destruct H1 as [method_defs].
   destruct H1. remember (get_fresh_oid h) as o. 
    remember (init_field_map (find_fields cls) empty_field_map) as F. 
    remember (add_heap_obj h o (Heap_OBJ cls F lb)) as h'.
  right. exists (Config CT (Container (ObjId o) fs lb sf ) ctns' h'). 
  apply ST_NewExp with field_defs method_defs cls F; auto. 
- inversion H4. subst.   inversion H6. subst.  apply value_progress with T; auto.
- subst.  pose proof (excluded_middle_value e). destruct H1.
  right. 
  + exists (Config CT (Container (v_l e lb1)  fs0 lb0 sf0) ctns h); auto. 
  + right. exists (Config CT (Container e ((labelData hole lb1) :: fs0) lb0 sf0) ctns h ). auto. 
- subst.  pose proof (excluded_middle_value e). destruct H1.
  right. 
  + inversion H1; subst; inversion H6. subst.  
  ++ exists Error_state. auto. 
  ++ subst. remember (join_label lb0 lb1) as l'.
    exists (Config CT (Container v fs0 l' sf0) ctns h). auto.
  ++ subst. inversion H4.  subst.  inversion H_valid_config. inversion H14. destruct H25. inversion H25. 
  + right. exists (Config CT (Container (e) ((unlabel hole)::fs0) lb0 sf0) ctns h); auto.
- subst.  pose proof (excluded_middle_value e). destruct H1.
  right. 
  + inversion H1; subst; inversion H6. subst.  
  ++ exists Error_state. auto. 
  ++ subst. 
    exists (Config CT (Container (l lb1) fs0 lb0 sf0) ctns h). auto.
  ++ subst. inversion H4.  subst.  inversion H_valid_config. inversion H14. destruct H25. inversion H25. 
  + right. exists (Config CT (Container (e) ((labelOf hole)::fs0) lb0 sf0) ctns h); auto.
- subst.  pose proof (excluded_middle_value e). destruct H1.
  right. 
  + inversion H1; subst; inversion H6. subst.  
  ++ exists Error_state. auto. 
  ++ subst. 
     remember (join_label lb0 lb1) as l'.
    exists (Config CT (Container (v) fs0 l' sf0) ctns h). auto.
  ++ subst. inversion H4.  subst.  inversion H_valid_config. inversion H14. destruct H25. inversion H25. 
  + right. exists (Config CT (Container (e) ((unlabelOpaque hole)::fs0) lb0 sf0) ctns h); auto.
- subst. destruct fs0. 
  + inversion H4. subst. inversion H_typing. inversion H. subst. inversion H21. subst.  
      inversion H18. subst. intuition.
   + right.   exists (Config CT (Container t0 fs0 lb0 sf0) ctns h ); auto.

- subst.  inversion H6. 
- subst.  pose proof (excluded_middle_value x). destruct H1.
  right. inversion H1; subst; inversion H6_. 
  + subst. pose proof (excluded_middle_value e). destruct H2. 
  ++  destruct H13 as [F]. destruct H3 as [lx].
  subst. rewrite <- H5 in H6. inversion H6. subst. 
  remember (fields_update F f e) as F'. rename lx into lo. 
  case_eq (flow_to lo lb0). +++ intro. 
  exists (Config CT (Container Skip fs0 lb0 sf0) ctns h ); auto.
  remember (update_heap_obj h o (Heap_OBJ cls_def0 F' lo)) as h'. auto. 
  apply ST_fieldWrite_normal with h' lo cls_def0 F F'; auto.
  +++ intro. exists Error_state. apply ST_fieldWrite_leak with lo cls_def0 F; auto. 
  ++ pose proof (exclude_middle_unlabelOpaque e). destruct H3.  
  +++ destruct H3 as [v]. destruct H3. 
  destruct H13 as [F]. destruct H10 as [lo].
  rewrite H9 in H6_0. inversion H6_0. subst. inversion H3; subst; inversion H17.
  ++++ subst.  
  exists Error_state. auto.
  ++++ subst.
  remember (fields_update F f v0) as F'.
  remember (update_heap_obj h o (Heap_OBJ cls_def0 F' lo)) as h'.
  case_eq (flow_to lo (join_label lb0 lb1) ).
  exists (Config CT (Container Skip fs0 lb0 sf0) ctns h'). auto. 
  apply ST_fieldWrite_unlableOpaque with lo cls_def0 F F'; auto.
  intro.  exists Error_state. auto. 
  apply ST_fieldWrite_unlableOpaque_leak with lo cls_def0 F; auto.
  ++++ subst. inversion H4.  subst.  inversion H_valid_config. inversion H21.  destruct H32. inversion H32. 

  +++ destruct H3. 
  ++++ exists (Config CT (Container (e) ((FieldWrite (ObjId o) f hole)::fs0) lb0 sf0) ctns h); auto. 
  ++++ exists (Config CT (Container (e) ((FieldWrite (ObjId o) f hole)::fs0) lb0 sf0) ctns h); auto. 
apply ST_fieldWrite4.  intros. intro contra. destruct H3 as [t']. destruct H3.  
rewrite H3 in contra. inversion contra.  subst. intuition. 
  auto. auto. 
+ subst. exists Error_state. auto. 
+  subst. inversion H4.  subst.  inversion H_valid_config. inversion H15.  destruct H26. inversion H26. 
+ right. exists (Config CT (Container (x) ((FieldWrite hole f e) ::fs0) lb0 sf0) ctns h); auto. 
- inversion H6_. subst. inversion H18. 
- right. exists (Config CT (Container  e1 (e2 :: fs0)  lb0 sf0) ctns h). auto. 
- subst. inversion H4. subst.   apply value_progress with T; auto.
- subst. inversion H4. subst.   apply value_progress with T; auto.
- subst. inversion H4. subst.   apply value_progress with T; auto.
- subst. inversion H4.  subst.  inversion H_valid_config. inversion H12. unfold hole_free in H24. 
    inversion H24. 
- subst. inversion H4.  subst.  inversion H_valid_config. inversion H12. 
  destruct H23. unfold dot_free in H23. inversion H23. 
Qed.  
*)Admitted. 
